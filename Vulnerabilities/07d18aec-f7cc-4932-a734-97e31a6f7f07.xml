<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>07d18aec-f7cc-4932-a734-97e31a6f7f07</Id>
    <Id_History>00000000-0000-0000-0000-000000071654,07d18aec-f7cc-4932-a734-97e31a6f7f07,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Use of Hard-coded Cryptographic Key</Title>
    <Category>Cryptographic Storage</Category>
    <Phase>Implementation</Phase>
    <Technology>PHP</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>Use of Hard-coded Cryptographic Key</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[=Description

Applications that use cryptography need a method for managing keys. One of the simplest ways to store the keys is to hard-code them into the application. However, this approach is not secure, because anyone with access to the application code is able to recover the keys. Once an attacker has recovered the keys, he can use them to decrypt sensitive data. This vulnerability applies to all applications that use cryptography.  

=Impact

An attacker that has access to the application code is able to recover any hard-coded cryptographic keys. If the attacker gets access to the data encrypted with those keys, he will be able to decrypt them. The trouble is that if the attacker is able to get the encrypted data, he can probably get the application code as well. Therefore, using hard-coded cryptographic keys essentially defeats the purpose of using encryption in the first place.

=Countermeasures

To prevent this vulnerability, provide a secure admin interface that allows for managing encryption keys, and use protected storage APIs to store the keys.

Provide a secure administrative interface that allows managing cryptographic keys:

* [[00000000-0000-0000-0000-00000086cf99|Provide a Secure Administrative Interface that Allows Managing Cryptographic Keys]]

Store encryption keys using protected storage APIs:
* [[00000000-0000-0000-0000-0000003480b5|Store Encryption Keys Using Protected Storage APIs]]

=Application Check

To check for adequate protection against this vulnerability, ensure that a secure admin interface that allows for managing cryptographic keys is provided, and examine all code that uses encryption to ensure that encryption keys are stored using protected storage APIs.

A secure administrative interface that allows managing cryptographic keys is provided:
* [[00000000-0000-0000-0000-00000079772b|A Secure Administrative Interface that Allows Managing Cryptographic Keys Is Provided]]

Encryption keys are stored using protected storage APIs:
* [[00000000-0000-0000-0000-00000010a9ae|Encryption Keys Are Stored Using Protected Storage APIs]]

=Computer Based Training Links=

Use the following Computer Based Training course(s) for more background information about this type of vulnerabilities.

==Security Tools and Technologies==

This course is designed to educate architects and developers on the technologies available to create more secure systems. Topics include common network security technologies, cryptography, antivirus technologies, access control technologies, tokens and smart cards, biometrics, and various authentication methods.

[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127644|DES 213 Security Tools and Technologies]]

//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//
]]></Data>
  </Content>
</TeamMentor_Article>