<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>c2ab8f50-3b6b-47a8-b530-c9a705bdf6c8</Id>
    <Id_History>00000000-0000-0000-0000-00000047aad7,c2ab8f50-3b6b-47a8-b530-c9a705bdf6c8,d55e99dc-c856-4c03-992c-67197b7177bb,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>XPath Injection</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 4.0</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>XPath Injection</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[=Description

XPath injection is a type of vulnerability that allows attackers to execute arbitrary queries on XML databases. XPath injection vulnerabilities are similar to SQL injection vulnerabilities, but they affect XML databases instead of SQL databases. XPath injection is often more dangerous than SQL injection, because permissions are not enforced and the malicious queries can access every part of the XML documents. XPath injection applies to any application that uses XPath to query XML documents. 

=Impact

XPath injection attacks may allow an attacker to retrieve, manipulate, or destroy data stored in XML documents. The exact impact depends on the type of XML data that is exposed via XPath injection. If authentication data is exposed, the attacker is able to take over any user account. By taking over the administrator's account, the attacker is able to take full control of the application. 

=Countermeasures

To prevent this vulnerability, validate all input and use parameterized APIs if possible. 

Validate all input:
* [[3de41277-0cc1-4ebc-8dd7-e96d161aa0ef|Validate All Input]]
* [[e59923e7-c2fb-4a75-8db7-a9a91e869f74|Validate Input for Length, Range, Format, And Type]]

=Application Check

To check for adequate protection against this vulnerability, find all code that uses XPath queries and make sure it does not include unvalidated user input. 

All input is validated:
* [[a210fcb7-f142-4c2e-844a-c43e0859f90d|All Input Is Validated]]
* [[0e71dd64-87d1-4cf5-9569-ea320f209977|Input Is Validated for Length, Range, Format, And Type]]

=Computer Based Training Links=

Use the following Computer Based Training course(s) for more background information about this type of vulnerabilities.

==Fundamentals of Web 2.0 Security==

This course introduces you to the fundamentals of secure Web 2.0 development. The course begins with a discussion about Web 2.0, its evolution, and the technologies behind it. The course describes common Web 2.0 attacks that can cause significant loss to organizations. It reviews the best practices that you should incorporate to mitigate the risks from Web 2.0 attacks, as well as practices to avoid. The course concludes with a walk-through of a software system scenario that can help you better understand Web 2.0 attacks and apply the best practices discussed in the course.

[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127634|COD 151 Fundamentals of Web 2.0 Security]]

//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//

=Additional Resources

* For more information about XPath injection, see https://www.owasp.org/index.php/XPATH_Injection]]></Data>
  </Content>
</TeamMentor_Article>