<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>e3330147-aa23-4c8b-b7e8-51fdab57e7b4</Id>
    <Id_History>00000000-0000-0000-0000-0000005ffbfc,e3330147-aa23-4c8b-b7e8-51fdab57e7b4,e1d57356-c906-4c41-91b4-4141b1384b26,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>HTTP Response Splitting</Title>
    <Category>Encoding</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 4.0</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>HTTP Response Splitting</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[=Description

HTTP Response Splitting occurs when an attacker is able to inject arbitrary data into the headers of HTTP responses. This vulnerability allows the attacker to force HTTP responses that contain HTML of the attacker's choosing. HTTP Response Splitting applies to web applications that place user input in HTTP response headers. 

=Impact

HTTP response splitting gives the attacker full control over the HTTP response. The attacker can use this control to conduct phishing and cross-site scripting attacks. The attacker may create a fake login page and make it appear to be a part of your application by using HTTP response splitting. That fake login page can be used by the attacker to collect the passwords of the users. The attacker may also inject arbitrary JavaScript into pages that are served by the application using HTTP response splitting. These scripts may redirect the application's users to a malicious site, steal their session cookies, or record users' keystrokes. Either through phishing or through cross-site scripting, the attacker may leverage HTTP response splitting to take over an administrator's account and gain full control of the application.

=Countermeasures

To prevent this vulnerability, validate all input and URL-encode data in HTTP response headers. 

Validate all input:
* [[3de41277-0cc1-4ebc-8dd7-e96d161aa0ef|Validate All Input]]
* [[e59923e7-c2fb-4a75-8db7-a9a91e869f74|Validate Input for Length, Range, Format, And Type]]

URL-encode data in HTTP response headers:
* [[00000000-0000-0000-0000-0000001bb278|URL-encode Data in HTTP Response Headers]]

=Application Check

To check for adequate protection against this vulnerability, ensure that all input is validated, and ensure that all data in HTTP response headers is URL-encoded. 

All input is validated:
* [[a210fcb7-f142-4c2e-844a-c43e0859f90d|All Input Is Validated]]
* [[0e71dd64-87d1-4cf5-9569-ea320f209977|Input Is Validated for Length, Range, Format, And Type]]

Data in HTTP response headers is URL-encoded:
* [[00000000-0000-0000-0000-0000003c0cd2|Data in HTTP Response Headers Is URL-encoded]]

=Computer Based Training Links=

Use the following Computer Based Training course(s) for more background information about this type of vulnerabilities.

==Web Vulnerabilities - Threats & Mitigations==

This course provides all the information you need to understand, avoid, and mitigate the risks posed by Web vulnerabilities. You are first provided with a detailed background on the most common and recent attacks against Web-based applications, such as cross-site scripting attacks and cross-site request forgery attacks. The course then delves into practical recommendations on how to avoid and/or mitigate Web vulnerabilities. Real-world examples are provided throughout the course to help students understand and defend against Web vulnerabilities.

[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127653|COD 221 Web Vulnerabilities - Threats & Mitigations]]

==Creating Secure ASP.NET Code==

This in-depth course examines the development of secure Web applications in ASP.Net. It provides developers and testers with an overview of common Web application vulnerabilities and a set of nine best practices and techniques to follow in order to avoid them. Throughout the course, students are provided with interactive games and simulations designed to reinforce the secure design and coding concepts that were introduced.

[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127607|COD 311 Creating Secure ASP.NET Code]]

//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//

=Additional Resources

* For more information about HTTP response splitting, see https://www.owasp.org/index.php/HTTP_Response_Splitting
* For the CWE entry about HTTP response splitting, see http://cwe.mitre.org/data/definitions/113.html]]></Data>
  </Content>
</TeamMentor_Article>