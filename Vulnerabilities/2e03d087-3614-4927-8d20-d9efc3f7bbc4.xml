<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>2e03d087-3614-4927-8d20-d9efc3f7bbc4</Id>
    <Id_History>00000000-0000-0000-0000-000000859bca,2e03d087-3614-4927-8d20-d9efc3f7bbc4,1af2d682-2816-48d9-b778-cae742cb58e0,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Command Injection</Title>
    <Category>Dangerous APIs</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>Command Injection</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[=Description

Applications often execute external commands as a part of their functionality. If the attacker is able to manipulate the choice of external commands or their parameters, the attacker may be able to use this functionality to execute arbitrary commands. If an attacker is able to execute arbitrary commands, he is typically able to take over the application and possibly take over the entire system. All applications that use external applications are affected by command injection vulnerabilities. Web applications are especially at risk, because they are exposed to the Internet. 

=Impact

Command injection allows an attacker to execute arbitrary commands. Using this vulnerability, an attacker can take full control of the application. If the attacker is able to leverage additional vulnerabilities or the server is not configured properly, this vulnerability may allow the attacker to take full control of the server. A command injection vulnerability acts as a virtual backdoor for an attacker to use the application and the server for his purposes. Any data that may be stored by or accessed by the application can also be compromised as a result of command injection.

=Countermeasures

To prevent command injection vulnerabilities, validate all input, use parameterized APIs to execute external commands if such APIs are available, and avoid using external commands if possible. 

Validate all input:
* [[b531d29c-86f7-4812-90ce-5f3f0f780aba|Validate Input from All Sources]]
* [[c98695c5-cf02-44a1-96bf-1f8046b8ad9d|Validate Input for Length, Range, Format, And Type]]
* [[0f49430b-2abe-408f-b046-89fa739f5d53|Input Validation Using JSF]]
* [[18ac74df-602b-4a58-8998-52f638f3a045|Input Validation Using SpringMVC]]
* [[d124abb1-e230-43ef-8762-1caa0dbb89ca|Input Validation Using Struts 1]]
* [[2f917654-65a8-49c9-b000-c17f9765bf42|Input Validation Using Struts 2]]

Use parameterized APIs:
* [[00000000-0000-0000-0000-000000179eb6|Use Parameterized APIs to Execute External Commands]]
* [[38342130-4e4b-47df-afd9-c7e8c86f77ee|Use ESAPI Executor]]

Avoid using external commands:
* [[00000000-0000-0000-0000-00000088035f|Avoid Using External Commands]]

=Application Check

To check for adequate protection against this vulnerability, ensure that all input is validated, parameterized APIs are used, and external commands are avoided.

All input is validated:
* [[b531d29c-86f7-4812-90ce-5f3f0f780aba|Input from All Sources Is Validated]]
* [[61869793-2c10-40c0-b82a-babcc0312697|Input Is Validated for Length, Range, Format And Type]]

Parameterized APIs are used:
* [[00000000-0000-0000-0000-00000015b09d|Parameterized APIs Are Used to Execute External Commands]]

External commands are avoided:
* [[00000000-0000-0000-0000-0000002ce7fd|External Commands Are Avoided]]

=Computer Based Training Links=

Use the following Computer Based Training courses for more background information about this type of vulnerabilities.

==OWASP Top Threats & Mitigations==

This course examines in depth the vulnerabilities, threats, and mitigations described in the OWASP Top 10 2013. Upon completion of this class, participants will be able to identify and mitigate the greatest threats that web application developers face, including: Injection, Broken Authentication and Session Management, Cross-Site Scripting (XSS), Insecure Direct Object References, Security Misconfiguration, Sensitive Data Exposure, Missing Function Level Access Control, Cross-Site Request Forgery (CSRF), Using Components with Known Vulnerabilities, and Unvalidated Redirects and Forwards.

[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/139631|DES 221 OWASP Top Threats & Mitigations]]

//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//
]]></Data>
  </Content>
</TeamMentor_Article>