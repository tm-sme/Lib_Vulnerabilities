<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1591783464" Content_Hash="91549264">
  <Metadata>
    <Id>47103484-487b-4493-a1dd-cf65a947c714</Id>
    <Id_History>b0ac82e3-fe0d-4581-85bd-48ff3fd9fb19,47103484-487b-4493-a1dd-cf65a947c714,c69eb5f4-ecb0-4271-93d7-6b7885a8f361,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Weak Password Attack</Title>
    <Category>Authentication</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Attack</Type>
    <DirectLink>Weak Password Attack</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="wikitext">
    <Data><![CDATA[=Applies To

All applications which provide authentication.

=Description

Attackers can reverse weak passwords by generating large tables of hashed values. The tables, called "rainbow tables," map the plaintext value to a hashed value so that, when the hacker discovers a table of usernames and hashed passwords, a simple lookup is all that is necessary to discover the plaintext password. Rainbow tables are very expensive to create, often taking weeks or months to generate and consuming very large amounts of hard drive space. For this reason rainbow tables are usually not generated for each attack, but generated once and reused multiple times.

=Impact

    *Credential compromise.
    *Information disclosure.

=Vulnerabilities

    *Weak hashing algorithm: Many hashing algorithms have been cracked, allowing for passwords to be recovered easily. Hashing algorithms that are not proven secure can be easily reversed, even if the attacker does not have the original source. Therefore one should never attempt to write one's own hashing algorithm.
    *Lack of salt: A random value can be added to the plaintext of the passwords to ensure that previously calculated rainbow tables cannot be used.

=Countermeasures

    *Use strong hashing algorithms: Research the current best practice for hashing algorithms, currently SHA256 is best practice.
    *Encrypt the plaintext passwords with salt: Salt adds a random value to the password so previously calculated rainbow tables cannot be used. The salt must be stored to verify the challenge password.
    *Use only one-way hashing algorithms: Using one way hashing algorithms will ensure proper use of the hash. Hash the challenge password and compare the calculated hash with the stored hash. This will minimize the amount of time the plaintext password is stored in memory.
    *Create a password policy: Determine the level of password or passphrase strength required by your application and state it in policy. Ensure that the system enforces the policy automatically, to prevent users from accidentally or intentionally choosing weak passwords.
    *Require regular password changes: Regular password changes will reduce the amount of time that an account with a potentially weak password is exposed, and will give an attacker less time to attempt to crack the password.

=Example

A rainbow table could contain all the popular passwords from a dictionary, all the possible passwords from a subset of characters or all hashes for a certain password length. The rainbow table also has to be generated for each hashing algorithm (SHA, MD5, MD4, etc.) A sample of a rainbow table may look something like the following:

|{{{Plaintext}}} |{{{SHA1 Hash}}}                          |
|{{{Test}}} |{{{640AB2BAE07BEDC4C163F679A746F7AB7FB5D1FA}}}|
|{{{Demo}}} |{{{E52C854D5631EEC7468BA4727B4C77EB745F2965}}}|
|{{{Password}}} |{{{8BE3C943B1609FFFBFC51AAD666D0A04ADF83C9D}}}|
|{{{password}}} |{{{5BAA61E4C9B93F3F0682250B6CF8331B7EE68FD8}}}|
|{{{Admin}}} |{{{4E7AFEBCFBAE000B22C7C85E5560F89A2A0280B4}}}|

=Additional Resources

    *For more information on Hash Function, see: http://en.wikipedia.org/wiki/Hash_function
    *For more information on Cryptographic Salt, see: http://en.wikipedia.org/wiki/Salt_%28cryptography%29

=Related Items

    *[[e3ffdced-ef7e-45c7-bbbb-a7e71052053c|Attack: Credentials Brute Force Attack]]
    *[[d00e43b2-f820-4668-8174-07045c4874be|Attack: Credentials Dictionary Attack]]
    *[[331bfa1d-94c7-485b-8d8f-b8bab3e679e4|Attack: Statistical Analysis Attack]]
]]></Data>
  </Content>
</TeamMentor_Article>