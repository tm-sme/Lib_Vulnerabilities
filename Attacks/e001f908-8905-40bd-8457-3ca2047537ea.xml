<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1102256527" Content_Hash="1390425320">
  <Metadata>
    <Id>e001f908-8905-40bd-8457-3ca2047537ea</Id>
    <Id_History>ac219c42-ec7a-4a01-be18-d0a76bd66018,e001f908-8905-40bd-8457-3ca2047537ea,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Session Prediction Attack</Title>
    <Category>Application State</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Attack</Type>
    <DirectLink>Session Prediction Attack</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="wikitext">
    <Data><![CDATA[=Applies To

Any network application that must keep state through the use of session identifiers.

=Description

In a session prediction attack, the attacker will attempt to discern the method used to create new session IDs for past, current or future sessions. If a session ID can be guessed, the attacker can piggyback on the credentials of an authenticated user and masquerade as that user.

=Impact

*Elevation of privilege: Session hijacking allows the attacker to act as the user whose session was hijacked.

=Vulnerabilities

*Poor or predictable session identifiers: Use of a small ID space increases the likelihood that IDs will have to be reused, and increases the probability of successful session ID guessing.
*Long session timeouts: If sessions do not expire, or if they take a very long time to expire, an attacker has more time to guess or use sniffed session IDs.
*Insecure communications channel: Use of insecure communication channels will allow an attacker to sniff valid session IDs in real time.

=Countermeasures

*Use strong random numbers for session identifiers: Use a cryptographically secure random number (e.g., GUIDs) generator for session IDs to ensure that the session ID cannot be predicted.
*Use a large ID space: This will ensure that session IDs are not repeated as often.
*Use small session timeout windows: If the timeout window is very small, the session may have expired by the time the attacker can guess or sniff a valid session ID.
*Use a secure communication channel: If the communication channel is secure, the attacker will have less data with which to guess the session ID, and the possibility of simply sniffing the session identifier is eliminated.
*Do not reuse session identifiers: Do not reuse session IDs for the same user. Assign a new cryptographically random session ID upon every successful login.

=Example

An attacker may attempt to log in multiple times to the server to collect a number of session IDs. Once a large enough set of session IDs have been collected, statistical analysis can be done to try to predict future session IDs. The attacker may also make sure that the server is not binding the session ID to any other information, such as IP or MAC address. This can be done by logging into the service from two different computers using different IPs and swapping the session IDs.

First the attacker will log in a number of times and pull the session IDs out of response. This can be done manually or using a tool. In this example, the following session IDs were collected:

|MTUzNTp1c2VyTmFtZQ==|
|MTUzNzp1c2VyTmFtZQ==|
|MTUzODp1c2VyTmFtZQ==|
|MTU0MDp1c2VyTmFtZQ==|

The trailing equals of the session IDs is a telltale sign of Base64 encoding. So, the attacker decodes the session IDs and notices that this web application uses incrementing session IDs appended to the username:

|MTUzNTp1c2VyTmFtZQ==| 	1535:userName|
|MTUzNzp1c2VyTmFtZQ==| 	1537:userName|
|MTUzODp1c2VyTmFtZQ==| 	1538:userName|
|MTU0MDp1c2VyTmFtZQ==| 	1540:userName|

Once the mechanism is known for predicting session IDs, the attacker can begin attacking the server. The attacker would simply guess a number slightly larger or smaller than the current session ID and append it to a list of known usernames in an attempt to generate a valid session identifier. Once the attempt is successful, the attacker can log in to the server as another user.

=Additional Resources

*For more information on credential and session prediction attacks, see: http://projects.webappsec.org/w/page/13246918/Credential%20and%20Session%20Prediction

=Related Items

    *[[331bfa1d-94c7-485b-8d8f-b8bab3e679e4|Attack: Statistical Analysis Attack]]
    *[[0e1b09a6-ec13-4eb6-b8e6-0a2d5d92d4b4|Attack: Key Bruteforce Attack]]
    *[[ad7b18e3-a8a0-4e87-b1a8-908e11449481|Attack: Network Credential Sniffing Attack]]
    *[[8756794f-3bb1-4e08-9bad-5297c8130a52|Attack: HTTP Session Hijacking Attack]]
    *[[edea26f5-72e9-40fb-a2d3-00224a9a84cd|Attack: HTTP Replay Attack]]
]]></Data>
  </Content>
</TeamMentor_Article>