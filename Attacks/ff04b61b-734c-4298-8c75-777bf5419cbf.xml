<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1118508499" Content_Hash="1985416068">
  <Metadata>
    <Id>ff04b61b-734c-4298-8c75-777bf5419cbf</Id>
    <Id_History>d190e4a5-6f18-409a-9c0d-a06156c47e6e,ff04b61b-734c-4298-8c75-777bf5419cbf,2cbb0ee7-af18-4f3c-bcbf-d1e28a2a4ce6,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Integer Underflow Attack</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Attack</Type>
    <DirectLink>Integer Underflow Attack</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="wikitext">
    <Data><![CDATA[=Applies To

Applications written in any language that does not perform automatic bounds checking.

=Description

An integer underflow occurs when an integer is decremented under the limit that the data type can hold. The most common result of an integer underflow is that instead of the resulting value becoming smaller, the data structure "wraps" and becomes as large as the data type can hold.

=Impact

    *Denial of service: Most often, the integer underflow will cause the application to crash after a memory address de-reference.
    *Data corruption: If the result is used in a file read or write operation, the application may read or write from the wrong place in disk or memory, resulting in corruption.
    *Remote code execution: In some cases, remote code may be executed if the calculated result is used for memory management or indexing into a buffer.

=Vulnerabilities

    *Improper arithmetic.
    *Failure to validate integer input.
    *Integer calculations or assignments used to determine the size of a buffer.
    *Insufficient bounds checking and failure to consider sign.
    *Program logic that makes assumptions about the value of integers.

=Countermeasures

    *Arithmetic checking: Always ensure that, when subtracting two numbers, the result is smaller than either operands. Take extra care when performing arithmetic operations with values near the maximum or minimum of the data type.
    *Use a language or framework that does integer checking: Frameworks like .NET and Java can be set to automatically check for integer overflows and underflows (e.g. CheckForOverflowUnderflow in C# and RemoveIntegerChecks in VB.NET).
    *Validate input: Always check the untrusted input for upper and lower limits and sign.
    *Verify logic: Ensure that, in all cases, all integer logic will operate appropriately for the accepted limits.

=Example

The following code segment shows a simple method whose job is to strip the the last character and the null terminator from a string, and return the result in a new character array.

{{{
char* stripString(char* sentence)
{
if (!sentence) return 0;    
//need one less, since we're stripping last character    unsigned int newLength = strlen(sentence) - 1;    
char* newBuffer = (char*) malloc (newLength);    
if (newBuffer != NULL){ strncpy (newBuffer, sentence, newLength);
}    
return newBuffer;
}
}}}

What happens when the string sentence is of zero-length? The strlen() call will return 0. Subtracting 1 from 0 when the data type is an unsigned integer will cause the value to wrap around to 4GB. So, in this code we would then attempt to allocate a 4 gigabyte buffer in the next line.

With a little care the problem can be avoided. Consider the following fixed version of the code:

{{{
char* stripString(char* sentence)
{
char* newBuffer = NULL;   
unsigned int strLength = 0;

if (!sentence) return 0;
   strLength = strlen(sentence);   
if (strLength > 0)
{
unsigned int newLength = strLength - 1;
newBuffer = (char*) malloc (newLength);       
if (newBuffer != NULL)
{          
strncpy (newBuffer, sentence, newLength);
}
}   
return newBuffer;
}
}}}

=Additional Resources

    *For more information on Arithmetic Underflow, see: http://en.wikipedia.org/wiki/Arithmetic_underflow
    *For more information on Java Data Types. see: http://www.unix.org.ua/orelly/java/langref/ch03_01.htm

=Related Items

    *[[46278060-865a-4882-b640-52f004064d5d|Attack: Integer Overflow Attack]]
    *[[1408d3c3-7fc1-4ff0-910e-cdf0e191b669|Attack: Client-side Validation Attack]]
]]></Data>
  </Content>
</TeamMentor_Article>