<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="799528816" Content_Hash="-806163302">
  <Metadata>
    <Id>26c31b8a-de72-40ee-992f-09cf13b4b845</Id>
    <Id_History>859e74b2-c7a9-44a3-a235-e40aeec9b4ff,26c31b8a-de72-40ee-992f-09cf13b4b845,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Deserialization of Untrusted Data Attack</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Attack</Type>
    <DirectLink>Deserialization of Untrusted Data Attack</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="wikitext">
    <Data><![CDATA[=Applies To

Applications written in any object-oriented language such as C++, Java, Python, Perl, or C#.

=Description

Serialization is the process of saving the state of an object for later reconstruction. This enables applications to take objects from memory and send them to a disk, database, or across a network. De-serialization is the reverse process. Loading untrusted data into memory for direct use puts the application at risk of being placed in an insecure state or crashing. Many languages have built-in serialization routines that do the heavy lifting for the programmer. They do not, however, protect the data integrity or prevent attackers from viewing sensitive information. Therefore, no serialized object should be considered safe for de-serialization until rigorous validation and cryptographic countermeasures have been taken to prevent tampering.

=Impact

    *Availability: Untrusted data may not be well formatted and could lead to erroneous or non-terminating de-serialization, or to a crash.
    *Information disclosure: Serialization may expose sensitive information because it does not protect private fields by default.
    *Authorization: Trusting de-serialized data without proper validation may lead to altered program logic or elevation of user privileges.

=Vulnerabilities

    *Failure to validate untrusted data during de-serialization.
    *Failure to cryptographically sign or encode data before serialization.

=Countermeasures

    *Sign objects before serialization: Use a cryptographic library to sign data with a private key prior to serialization. This way the application can know when data has been changed and is therefore untrustworthy. This also provides authentication of the sender.
    *Encrypt objects before serialization: To add to all the benefits of signing objects, correctly encrypt the entire object with an appropriate asymmetric cipher to prevent untrusted users from examining the contents of the object.
    *Populate new objects: Instead of using the generic object serialization routines, write your own custom routines for each class. When de-serializing, populate a new object with the data the same way it was created by the application the first time. This ensures a known good state by using constructors and other initialization routines. It also makes it easier to validate each variable separately, and is much safer than accepting an object as a whole.
    *Explicitly prevent serialization where appropriate: When private data should be protected by not serializing at all, explicitly overload the default serialization functionality to prevent it in the class that inherits from it.
    *Make fields transient to prevent them from being serialized: Sometimes you may only have specific fields that should not be serialized. In this case prevent it by using the language-specific keyword to make them transient.

=Example

The following Java code serializes a simple class to a file. It then de-serializes from the file without performing any validation. This presents a serious risk because anything in the file, including the procedures, could have changed in the interim.

{{{
import java.io.Serializable;
import java.util.Date;
public class Record implements Serializable

{  
private String name;
private String record;
private Date date;
public Record(String n, String r)

{
      name = n;
      record = r;
      date = Date();

}
}
// setupString filename = "record.obj";

FileOutputStream fos = null;
ObjectOutputStream 

out = null;
ObjectInputStream oin = null;
FileInputStream fis = null;

Record record = new Record("Alice", "Is the data that lives here malicious?");// 

serializetry{   fos = new FileOutputStream(filename);
   oos = new ObjectOutputStream(fos);
   oos.writeObject(record);
   oos.close();

}
catch(IOException ex)

{   
ex.printStackTrace();

}

// deserializerecord = null;

try
{

fis = new FileInputStream(filename);
oin = new ObjectInputStream(fis);   
record = (Record)oin.readObject();
oin.close();
}       
catch(IOException ex) 
{   
ex.printStackTrace();
}       
catch(ClassNotFoundException ex)
{   
ex.printStackTrace();
}

}}}

The best solution is to write your own custom serialization method that writes the two string and date to a file as plain text, and then encrypt the entire thing. However, an acceptable solution is presented below. Use a cryptographic library to sign the object before you serialize, so you can verify the sender and verify that it has not been modified.

{{{
// setup SignedObject signedobject = null;
KeyPairGenerator kpg = KeyPairGenerator("SHA-1/DSA");
KeyPair kp = kpg.generateKeyPair();
PrivateKey privatekey = kp.getPrivate();
PublicKey publickey = kp.getPublic();
Signature signature = Signature.getInstance("SHA-1/DSA");
// sign objectsignedobject = new SignedObject(record, privatekey, signature);
// serializetry{   fos = new FileOutputStream(filename);
   oos = new ObjectOutputStream(fos);
   oos.writeObject(signedobject);   
oos.close();
}
catch(IOException ex){   ex.printStackTrace();
}
// deserializerecord = null;
signedobject = null;
try
{
fis = new FileInputStream(filename);   
oin = new ObjectInputStream(fis);
signedobject = (SignedObject)oin.readObject();
oin.close();
boolean ok = signedobject.verify(publickey, signature); 
  
if (ok){record = (Record)signedobject.getObject();
}   
else{record = null;
}
}    
catch(IOException ex) 
{  
 ex.printStackTrace();
}    
catch(ClassNotFoundException ex)
{   
ex.printStackTrace();
}
}}}

=Additional Resources

    *For more information on serialization, see: http://en.wikipedia.org/wiki/Serialization
    *For more information on .NET serialization, see: http://msdn.microsoft.com/en-us/magazine/cc301761.aspx
    *For more information on Java serialization, see: https://blogs.oracle.com/manveen/entry/java_serialization
    *For more information on Securing Java serialization, see: http://www.javaworld.com/javaworld/jw-11-2000/jw-1117-howto.html?page=1

=Related Items

    *[[8698cde2-0fdf-4676-a043-ae90e62f55b8|Attack: Command Injection Attack]]
    *[[9d60faca-687b-4c69-91ba-f5712af0fd02|Attack: Server-Side Code Injection Attack]]
    *[[4d3185fd-1e48-40af-bc07-71206c40806b|Attack: Trust Relationship Attack]]
    *[[1408d3c3-7fc1-4ff0-910e-cdf0e191b669|Attack: Client-side Validation Attack]]
 

]]></Data>
  </Content>
</TeamMentor_Article>