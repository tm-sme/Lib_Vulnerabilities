<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-369593238" Content_Hash="-150120562">
  <Metadata>
    <Id>1508d763-03f1-4b43-bf8e-ad7cf8edebd7</Id>
    <Id_History>9e18ec6e-1100-4423-b5cf-60b2e117ca25,1508d763-03f1-4b43-bf8e-ad7cf8edebd7,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Xpath-XQuery Attack</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Attack</Type>
    <DirectLink>Xpath-XQuery Attack</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="wikitext">
    <Data><![CDATA[=Applies To

Any application that can manipulate XML documents through Xpath/XQuery.

=Description

An Xpath/XQuery attack exploits missing or poor input validation to run arbitrary commands in XML databases. This attack works in much the same way as a SQL injection attack, but with an XML target instead of a SQL target. This attack can occur when an application uses unvalidated user input to construct an Xpath/XQuery statement to access XML tables. Using the Xpath/XQuery attack the attacker can execute arbitrary Xpath/XQuery statements on an XML database. This attack is often more damaging than a SQL injection attack, as permissions are not enforced and the attacker’s query can access every part of the XML document. With an Xpath/XQuery attack it is possible to retrieve, manipulate, and destroy any data stored in the XML document.

=Impact

    *Confidentiality: Since XML generally holds sensitive data, loss of confidentiality is a frequent problem.
    *Integrity: The attacker may be able to not only read sensitive information, but also to change or even delete this information.
    *Authentication: If poorly formed XPath/XQuery commands are used to check user names and passwords, the attacker may be able to connect to a system as another user with no previous knowledge of the password.
    *Authorization: If authorization information is held in an XML document, the attacker may be able to change this information.
    

=Vulnerabilities

    *Weak input validation.
    *Generating XPath expressions by dynamically concatenating strings with user-supplied data.
    *Failure to escape single quotes, double quotes, and other potentially dangerous characters.

=Countermeasures

    *Validate input: Use vigorous whitelist style validation on any user input that may be used as part of an XQuery command. This will also help prevent meta-characters from being added to your stored data set which will be used again.
    *Use parameterized and precompiled XPath expressions in your XQuery instead of concatenating strings with user input: Parameterized Xpath statements will accept characters that have special meaning to Xpath (like single quote) without problems because they are strongly typed.
    *Use escaping routines. If you cannot use parameters and must generate XPath expressions dynamically, use escaping routines to handle special characters that have meaning to the database.
    *Do not echo XQuery errors. Catch any exceptions on the server and return generic error messages to the client.

=Example

Consider the following XML file, being used by an application to log users into the application:

{{{
<?xml version="1.0" encoding="ISO-8859-1"?> 
<users>    
	<user>       
		<username>admin</username>       
		<password>8af2&</password>       
		<account>admin</account>    
	</user>    

	<user>       
		<username>user1</username>       
		<password>password</password>       
		<account>guest</account>    
	</user>    

	<user>       
		<username>user2</username>       
		<password>1234</password>       
		<account>guest</account>    
	</user> 
</users>
}}}

A developer could use the following {{{Xpath}}} command to return all the users with the username:

{{{
‘user1’ and password ‘password’string(//user[username/text()='user1'        
and password/text()='password']/account/text())
}}}

However, without proper input validation, the attacker could easily input a logic statement to manipulate the output of the query. An attacker could provide the following string to the {{{Xpath}}} statement above.

{{{
Username: user1Password: ' or '1' = '1
}}}

This will change the {{{Xpath}}} statement to look like this:

{{{
string(//user[username/text()='user1' and password/text()=''        
or '1' = '1']/account/text())
}}}

The password portion of the query will always resolve to true, which means that the application will authenticate the attacker as {{{user1}}} even though no password was provided.

A good way to fix this example is to use a parameterized query. The idea here is to create a precompiled query that gets values from parameters instead of dynamically creating an {{{XPath}}} expression by concatenation at run time. Let {{{$username}}} and {{{$password}}} be string variables that hold the users input. Then construct a query in the following way:

{{{
"//user[user[username/text()=$username and password/text()=$password]"
}}}

If you are using .NET, see the Additional Resources below for another example of how this works.

=Additional Resources

    *For more information on Mitigating XPath Injection Attacks in .NET, see: http://www.tkachenko.com/blog/archives/000385.html
    *For more information on XPATH Injection, see: http://www.owasp.org/index.php/XML_Injection
    *For more information on XPath injection in XML databases, see: http://palisade.plynt.com/issues/2005Jul/xpath-injection/index.php

=Related Items

    *[[ae392dbb-fdb4-443f-9d17-78240b4acc95|Attack: XML Injection Attack]]
    *[[b1757bda-0a0d-48e7-b101-3c4088e41878|Attack: SQL Injection Attack]]
    *[[8482159c-5ec2-4b89-9c65-9af765030ff5|Attack: Information Disclosure Attack]]
    *[[9d60faca-687b-4c69-91ba-f5712af0fd02|Attack: Server-Side Code Injection Attack]]
    *[[61f0d74e-d9b6-4e27-9e12-da65baff83fd|Attack: LDAP Injection Attack]]]]></Data>
  </Content>
</TeamMentor_Article>