<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>a72f6958-7f22-4de1-8504-8106a9c302a4</Id>
    <Id_History>a72f6958-7f22-4de1-8504-8106a9c302a4,3657521a-64e4-47d7-8fec-af1c3ca7ad1b,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>SQL Injection</Title>
    <Category>Database Security</Category>
    <Phase>Implementation</Phase>
    <Technology>C++</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>SQL Injection</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[=Description=
SQL injection is a type of vulnerability in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. 

Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application. 

SQL injection applies to all applications that query SQL databases. 

=Impact=
SQL injection allows the attacker to access any data in the database. The attacker will usually use this to extract any sensitive data from the database. If there are any passwords in the database, the attacker is likely to try to use them to log in as the administrator and take over the application or the server. 

Some database servers allow so-called "stacked queries". "Stacked queries" allow execution of multiple queries separated by a semi-colon from one string. If "stacked queries" are enabled, SQL injection allows the attacker to execute any queries on the database server. This usually allows the attacker to take full control of the application. 

Many database servers also allow execution of arbitrary operating system commands. The attacker may abuse that functionality with SQL injection to take full control of the application or the server. 

=Countermeasures=
To prevent this problem, validate all input and use parameterized APIs for database access. 

* [[a8eb9762-08f6-4e61-afa7-23386cbca281|Validate All Input]]

* [[6c0bb66c-0fd6-4297-a2b6-d3cf399030fa|Use Parameterized APIs for Database Access]]

=Application Check=
To check for adequate protection against this vulnerability, ensure that all input is validated and that parameterized APIs are used for database access.

* [[8d8c24b0-096b-43f4-9391-9b293313a0e8|All Input Is Validated]]

* [[bd42f983-e0f6-4dd9-8dfb-51cba674b906|Parameterized APIs Are Used for Database Access]]]]></Data>
  </Content>
</TeamMentor_Article>