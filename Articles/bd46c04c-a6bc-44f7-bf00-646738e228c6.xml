<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>bd46c04c-a6bc-44f7-bf00-646738e228c6</Id>
    <Id_History>bd46c04c-a6bc-44f7-bf00-646738e228c6,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Weak Encryption</Title>
    <Category>Cryptographic Storage</Category>
    <Phase>Implementation</Phase>
    <Technology>C++</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>Weak Encryption</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[=Description=
Weak encryption vulnerabilities occur when weak encryption algorithms are used or encryption is not used properly. For encryption to work properly, strong and up-to-date cryptographic algorithms must be used. Each cryptographic algorithm has its own specific properties that define the most secure way(s) of using it. Using the wrong encryption scheme or using it incorrectly creates the potential for an attacker to recover the encrypted data within reasonable time. In some cases, the weaknesses are so glaring that recovering the encrypted data becomes trivial. 

All applications that use encryption are affected by these issues.

=Impact=
The impact of using weak encryption is that the attacker will be able to recover encrypted data. Encryption should be the last line of defense - ideally the attacker should not be able to get the encrypted data. However, if the attacker has compromised the system and downloaded the data, the encryption should prevent him from being able to make use of the data. If weak encryption is used, the attacker might be able to use the data. 

There is a broad range of possible attack scenarios that involve weak encryption, but in practice, the most common cases of weak encryption are also the most trivial. Many applications use algorithms that are not even meant to be used for encryption, such as XOR, ROT-13 and base64_encode to obfuscate data. To make things worse, that data is often placed in a location accessible by the attacker. In such cases, the attacker will be able to easily recover the obfuscated data. 

=Countermeasures=
To prevent encryption issues, use strong cryptographic algorithms correctly, use strong keys, and protect the encryption keys.

* [[ef249787-65df-476b-a344-d2df7578732e|Use Strong Cryptographic Algorithms to Secure Sensitive Data]]

* [[58b12785-2ca7-48b0-89c5-8bee7aaa1cf8|Use Strong Encryption Keys]]

* [[b017f172-171b-4aa3-96d4-47cbaaf362e2|Protect the Encryption Keys]]

=Application Check=
To ensure that strong encryption is used, verify that strong cryptographic algorithms are used, verified that they are used correctly, verify that strong keys are used and that the keys are protected.

* [[dab7ea8c-2c13-4aa6-b644-897960e4859a|Strong Cryptographic Algorithms Are Used to Secure Sensitive ]]

* [[e19e6c8e-f5e4-4607-8c71-34102dc2e760|Encryption Keys Are Protected]]

* [[d498b6c2-c007-4094-9a46-f3e06bdf50e7|Strong Encryption Keys Are Used]]]]></Data>
  </Content>
</TeamMentor_Article>