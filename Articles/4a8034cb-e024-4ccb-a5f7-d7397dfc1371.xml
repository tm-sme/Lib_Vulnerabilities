<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>4a8034cb-e024-4ccb-a5f7-d7397dfc1371</Id>
    <Id_History>4a8034cb-e024-4ccb-a5f7-d7397dfc1371,f61f3c7f-d71f-4bad-8026-60708b13a5a0,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Remote File Inclusion</Title>
    <Category>Dangerous APIs</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>Remote File Inclusion</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[=Description

Remote file inclusion (RFI) occurs when the application executes a file located on an external server, which is usually controlled by the attacker. This enables the attacker to execute arbitrary code as a part of the application, in effect allowing them to do anything that the application and the application platform can do. It could potentially result in the attacker gaining complete control of the system. RFI affects PHP applications. 

=Impact

Remote file inclusion allows an attacker to execute arbitrary code with great ease. Usually, RFI is exploited by specifying a URL to the attacker's script of choice as a part of the HTTP request. The vulnerable application loads the malicious script from the URL and executes it as a part of the application. The attacker will typically use a "web shell" as the attack script and as a result gain full control of the application platform. From there, the attacker may leverage additional vulnerabilities to take full control of the server. Actually, the attacker usually has no need to go this far, because taking full control of the application platform will usually give him all the access he wants. If there is something particularly valuable on the target network, the attacker may use the compromised server to pivot his way around the network and attack other machines on it.

RFI is extremely easy to exploit and to automate, which has led to RFI vulnerabilities being used to create powerful botnets in 2011. These botnets were used for numerous high-profile DDoS attacks. As a result, RFI became well known and a simple mitigation measure, disabling loading remote PHP scripts, became well known. At this point, RFI is relatively rare because most hosting providers know to disable loading external PHP scripts. RFI is still an extremely dangerous vulnerability that can be easily avoided by configuring PHP accordingly. 

=Countermeasures
To prevent RFI, configure PHP for security. 

=Application Check
To check for adequate protection against RFI, ensure that PHP is configured for security. 

=Specific Technologies

* [[80380670-a6f7-431c-8709-b7fe5db60295|PHP Remote File Inclusion]]]]></Data>
  </Content>
</TeamMentor_Article>