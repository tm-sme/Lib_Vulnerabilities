<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>b49ada22-a22a-4fc0-8bc6-89689288728f</Id>
    <Id_History>b49ada22-a22a-4fc0-8bc6-89689288728f,73220753-30f5-44a5-ba09-a1bf1cd0ad54,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Null Byte Injection</Title>
    <Category>Deployment Considerations</Category>
    <Phase>Deployment</Phase>
    <Technology>Java</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>Null Byte Injection</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Description==

Null byte injection occurs when the application does not correctly process null byte characters in input, and uses this incorrectly processed input to make security-sensitive decisions. Null byte injection is usually used by attackers to bypass file extension filters in order to exploit file inclusion vulnerabilities in PHP. Null byte injection is usually a vulnerability in the platform and not the application itself. 

The premise of null byte injection is that C and C++ use null bytes to terminate strings. So, when a platform passes data that contains null bytes to native code written in C or C++, that native code will only read the data until the first null byte as the value of the string. One common way this is exploited is as follows: the truncated string points to a different resource than the full string, the full string passes validation, and the truncated string is used as a part of an attack.

All applications are potentially affected by null byte injection vulnerabilities.

==Impact==

Null byte injection vulnerabilities require additional vulnerabilities to be present to be useful to attackers. The impact of null byte injection is the ability to bypass filename filters that are used to protect code that contains file inclusion vulnerabilities. 

For example, take an application that contains a local file inclusion vulnerability, but validates file extensions before loading them to make sure that only safe files are loaded. If the server is running a version of the platform that is vulnerable to null byte injection, the attacker will be able to load dangerous files. If this application only allows loading files with a .php extension, but the attacker is able to upload only files with a .jpg extension, the attacker can leverage null byte injection to load the .jpg files as if they were .php files. 

To do this, the attacker sends a request to load a file named malicious.jpg%00.php. The validation code will see the .php extension on the end of the string and allow the local file inclusion to take place. The include function in PHP is vulnerable to null byte injection in older versions of the platform, and will interpret malicious.jpg%00.php to mean malicious.jpg. The result is that the attacker is able to bypass filename extension validation to execute arbitrary malicious code with the privileges of the vulnerable application. 

==Countermeasures==

To prevent null byte injection vulnerabilities, install system updates.

* [[8e0be904-c17c-4fd4-a6c5-97d9dd545765|Install Patches]]

==Application Check==

To make sure that null byte injection vulnerabilities are prevented, verify that system updates are installed.

* [[80f66bc0-d29d-464e-8ddb-52e2c6f5140b|Patches Are Installed]]

==Additional Resources==

* For more information about null byte injection, see http://projects.webappsec.org/w/page/13246949/Null%20Byte%20Injection
]]></Data>
  </Content>
</TeamMentor_Article>