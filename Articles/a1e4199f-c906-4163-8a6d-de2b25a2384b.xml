<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>a1e4199f-c906-4163-8a6d-de2b25a2384b</Id>
    <Id_History>a1e4199f-c906-4163-8a6d-de2b25a2384b,3615475e-288e-4551-951f-f9c2408cae55,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Content Spoofing</Title>
    <Category>Other</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>Content Spoofing</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Description==

Content spoofing vulnerabilities occur when the application can be manipulated to display malicious content injected by the attacker. This is a very broad vulnerability class that can have multiple causes. Cross-site scripting (XSS) vulnerabilities can result in content spoofing, and cross-site scripting is itself a broad vulnerability class. Content spoofing can also result from poor authentication controls that allow the attacker to substitute application data with malicious data. 

It is not necessary for the attacker to compromise the application â€“ content spoofing is in the eye of the beholder; so long as the user sees the attacker's content and thinks it is coming from the application, content spoofing is taking place. 

Content spoofing can be caused by many different mistakes, many of them outside the control of application developers. For example, a DNS hijack of a hostname that is used by an application can be used to redirect users to a spoof site. 

Content spoofing overlaps with cross-site scripting where malicious data is injected in HTML contexts, but content spoofing is broader because it also  includes injecting content that is not interpreted as script by the client.

All applications are potentially affected by content spoofing vulnerabilities.

==Impact==

The impact from content spoofing vulnerabilities affects the users of the application and ranges from being a nuisance to full system compromise. Nuisance results from defacing of legitimate content with an attacker's content of choice, which might include profanity or some other form of obscenity. Full system compromise results if the spoofed content includes malicious script that exploits additional vulnerabilities on the client system, such as holes in the client's web browser or web browser plug-ins. Upon compromising the client system, the attacker will typically also compromise the user's credentials for the application and gain a foothold in the application. 

Content spoofing might also be used to perform cross-site scripting (XSS) attacks, in which case the impact is the same as for regular cross-site scripting vulnerabilities. Cross-site scripting allows the attacker to perform actions on the behalf of the user within the application. If an administrative user views the malicious script, administrative actions can be performed by the script, potentially resulting in the compromise of the application. 

==Countermeasures==

To prevent content spoofing vulnerabilities, validate all input, encode all untrusted data that will be displayed, and use SSL/TLS.

* [[b531d29c-86f7-4812-90ce-5f3f0f780aba|Validate Input from All Sources]]
* [[f83b953a-9b0c-406a-b274-9b2962d9c4e7|Encode All Output Data]]
* [[c317a2fc-cf4b-4b21-8523-4c911afca161|Use SSL]]

==Application Check==

To make sure that content spoofing vulnerabilities are prevented, verify that all input is validated, all untrusted data that will be displayed is encoded, and SSL/TLS is used.

* [[7f8deb21-cd52-41be-80b4-8897612021dc|Input from All Sources Is Validated]]
* [[13112146-7c14-4b6d-9e94-24daa22eefc4|All Output Data Is Encoded]]
* [[b473157f-aa07-4822-8d35-53ec73da44f4|SSL Is Used]]

==Additional Resources==

* For more information about content spoofing, see http://projects.webappsec.org/w/page/13246917/Content%20Spoofing
]]></Data>
  </Content>
</TeamMentor_Article>