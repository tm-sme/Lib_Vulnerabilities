<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>d87dc143-4a28-43ac-a439-93226c7fb514</Id>
    <Id_History>d87dc143-4a28-43ac-a439-93226c7fb514,076be389-34b9-4c36-a1cb-dafe03cc06ac,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Uninitialized Variable</Title>
    <Category>Other</Category>
    <Phase>Implementation</Phase>
    <Technology>C++</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>Uninitialized Variable</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[=Description=
An uninitialized variable is technically not a vulnerability in itself, but might result in unintended program behavior. The danger of uninitialized variables is that they might be used by code as if they are intended to hold their default value. The most likely outcome is that the application won't work correctly and, in some cases, it might crash. 

The uninitialized variable issue affects all applications.

=Impact=
The impact of uninitialized variables is that the application won't work properly. The bugs introduced by not initializing variables usually are obvious in terms of user experience but have no security implications. In some extremely rare circumstances uninitialized variables might lead to other types of vulnerabilities. In practice, uninitialized variables are not something that attackers look for and are not in themselves exploitable. It is, however, considered good programming practice to always initialize variables before using them.

=Countermeasures=
To prevent uninitialized variable vulnerabilities, initialize variables before using them.

* [[377919e5-9cd3-40f1-9658-1d4cdabf2b3a|Initialize All Variables Before Use]]

=Application Check=
To check for adequate protection against this vulnerability, ensure that variables are initialized before being used.

* [[d284ab1c-86f5-441d-84df-f25bcbb58f3a|Variables Are Initialized Before Use]]

=Computer Based Training Links=

Use the following Computer Based Training courses for more background information about this type of vulnerabilities.

==Creating Secure Code – C/C++ Foundations==

This course will provide an overview of the threat modeling process and describe the ways to collect information for your application, build the activity-matrix and threat profile, and analyze risks.  It will also teach you the nine defensive coding principles and how to use these principles to prevent common security vulnerabilities.

[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127613|COD 212 Creating Secure Code – C/C++ Foundations]]

==Creating Secure C/C++ Code==

In this course, you will learn to detect common coding errors that lead to vulnerabilities. You will learn to effectively remediate the most common security vulnerabilities, and use the right tools to secure your code and detect security vulnerabilities early in the project lifestyle.

[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127609|COD 312 Creating Secure C/C++ Code]]

//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//]]></Data>
  </Content>
</TeamMentor_Article>