<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>676b874a-f1e3-4957-855e-c386bd289e22</Id>
    <Id_History>676b874a-f1e3-4957-855e-c386bd289e22,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Weak Encryption</Title>
    <Category>Cryptographic Storage</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>Weak Encryption</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[=Description=
Weak encryption vulnerabilities occur when weak encryption algorithms are used or encryption is not used properly. For encryption to work properly, strong and up-to-date cryptographic algorithms must be used. Each cryptographic algorithm has its own specific properties that define the most secure way(s) of using it. Using the wrong encryption scheme or using it incorrectly creates the potential for an attacker to recover the encrypted data within reasonable time. In some cases, the weaknesses are so glaring that recovering the encrypted data becomes trivial. 

These issues affect all applications that use encryption.

=Impact=
The impact of using weak encryption is that the attacker will be able to recover encrypted data. Encryption should be the last line of defense - ideally the attacker should not be able to get the encrypted data. However, if the attacker has compromised the system and downloaded the data, the encryption should prevent him from being able to make use of the data. If weak encryption is used, the attacker might be able to use the data. 

There is a broad range of possible attack scenarios that involve weak encryption, but in practice, the most common cases of weak encryption are also the most trivial. Many applications use algorithms that are not even meant to be used for encryption, such as XOR, ROT-13 and base64_encode to obfuscate data. To make things worse, that data is often placed in a location accessible by the attacker. In such cases, the attacker will be able to easily recover the obfuscated data. 

=Countermeasures=
To prevent weak encryption issues, use strong cryptographic algorithms correctly, use strong encryption keys, and protect the encryption keys.

* [[66df6465-5476-4b55-90c8-ffbd7d556205|Use Strong Symmetric Encryption]]
* [[f5cdd292-6f61-4584-b014-fc5134a3f9bc|Use Strong Asymmetric Encryption]]
* [[1057099e-dd79-4f41-8b7e-36f00f1343e4|Use a Secure Key Storage Location]]

=Application Check=
To ensure that strong encryption is used, verify that strong cryptographic algorithms are used correctly, strong encryption keys are used, and encryption keys are protected.

* [[23019ede-9f30-4709-997d-586475a2e626|Strong Symmetric Encryption Is Used]]
* [[14a46517-6c86-498e-8429-1cb5ca3ce7c1|Strong Asymmetric Encryption Is Used]]
* [[08e76219-384d-4c5f-954e-09617f717558|A Secure Key Storage Location Is Used]]

=Computer Based Training Links=

Use the following Computer Based Training courses for more background information about this type of vulnerabilities.

==Creating Secure J2EE Code==

This course introduces and explains the precautionary measures you can use to avoid Web software security vulnerabilities, such as data leakage attacks, client/server protocol manipulation, injection attacks, and exploiting authentication.  At the end of this course, you will have learned about time-tested defensive coding principles and how to use them to increase the security of your application, and prevent common security vulnerabilities.

[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127619|COD 313 Creating Secure J2EE Code]]

==Creating Secure Code - JRE Foundations==

In this course, you will learn to recognize and remediate common Java Web software security vulnerabilities.  This course has three modules, which introduce you to these vulnerabilities and help you to identify and remediate them.

[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127615|COD 211 Creating Secure Code - JRE Foundations]]

//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//
]]></Data>
  </Content>
</TeamMentor_Article>