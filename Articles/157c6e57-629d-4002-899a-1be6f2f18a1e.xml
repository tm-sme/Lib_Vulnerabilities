<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>157c6e57-629d-4002-899a-1be6f2f18a1e</Id>
    <Id_History>157c6e57-629d-4002-899a-1be6f2f18a1e,65286931-45ee-4612-9944-f7b83b866e0c,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Format String</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>Format String</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[=Description=
Format string vulnerabilities occur when untrusted user input is used as the format string parameter in C functions that perform formatting, such as printf(). This vulnerability allows an attacker to crash the program or execute arbitrary code. 

The vulnerability stems from the fact that manipulating the format string allows the attacker to manipulate the program behavior. The %s, %x, and other format tokens can be used to print data from the stack and sometimes from other memory locations. Arbitrary data can be written anywhere in memory using the %n format token. Writing arbitrary data to arbitrary locations allows the attacker to place malicious code in memory and overwrite instruction pointers to redirect program execution flow to the malicious code. 

Format string vulnerabilities affect applications written in native code that use functions with format string parameters.

=Impact=
Format string vulnerabilities allow the attacker to crash the application or to execute arbitrary code. The arbitrary code execution vector is clearly preferable to attackers. A common real-world scenario involves running format string exploits against a vulnerable application on a system on which the attacker already has a user account, with the goal of gaining additional privileges. In the privilege escalation scenario, the exploit is usually used to spawn a shell with super-user privileges. 

Another likely scenario is using format string exploits against remote network services to gain access to the server that is hosting those services. Upon successful exploitation, the attacker is able to execute arbitrary code with the privileges of the user account that is running the network service. The attacker will usually bind a shell to a port and then connect to it to have a command line interface to the compromised system. 

Real-world format string vulnerability exploitation is mostly focused on Linux and UNIX style operating systems. Thanks to highly effective automated code analysis tools, format string vulnerabilities are somewhat rare in popular applications.

=Countermeasures=
To prevent format string vulnerabilities, don't use functions with format string parameters, donâ€™t hard-code format strings, and don't allow users to manipulate format strings.

=Application Check=
To check for adequate protection against this vulnerability, make sure that functions with format string parameters are not used, that format strings are not hard-coded, and that users cannot manipulate format strings.

=Specific Technology=

* [[9f06e83b-77bf-40b8-9f20-5f88e892630c|C++ Format String]]
]]></Data>
  </Content>
</TeamMentor_Article>