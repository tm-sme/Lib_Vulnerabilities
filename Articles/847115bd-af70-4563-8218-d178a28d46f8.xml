<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>847115bd-af70-4563-8218-d178a28d46f8</Id>
    <Id_History>847115bd-af70-4563-8218-d178a28d46f8,7647f006-fdfc-41c3-b60a-8930400a294c,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Abuse of Functionality</Title>
    <Category>Other</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>Abuse of Functionality</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Description==

Abuse of functionality vulnerabilities occur when the application's own features can be used to carry out attacks, usually against something other than the vulnerable application itself. The impact of abuse of functionality vulnerabilities is usually some form of denial of service condition, but in some rare cases, these vulnerabilities might be abused to bypass other security controls. This class of vulnerabilities is very broad and the vulnerabilities themselves are usually highly specific to the application - these factors make it difficult to define specific steps to prevent this type of vulnerabilities from occurring.

All applications are affected by abuse of functionality vulnerabilities.

==Impact==

The exact nature of abuse of functionality vulnerabilities is different for different applications—the attacker abuses the design of the application itself, which is different for different applications. The most common result is that the application can be used to perform denial of service attacks on other servers or to consume its own server's resources resulting in a local denial of service condition. In other, less common cases, functionality can be abused to access restricted information or to bypass access controls.

One example of a classic abuse of functionality vulnerability is the WordPress pingback feature denial of service attack, which has been detected in early 2014. WordPress has a feature that allows notifying other sites when text from these sites is being used. The pingback feature essentially sends HTTP requests to hosts other than the one that is used by the WordPress application. An attacker is able to flood a remote server with HTTP requests by triggering the pingback feature repeatedly. Somebody was abusing this pingback feature to perform large-scale distributed denial of service attacks using as many as 150000+ WordPress application servers. Because the pingback feature was implemented the way that the WordPress team wanted to implement it, the WordPress team did not consider it to be vulnerable and did not plan to "fix" it, even after the fact of this feature being abused has been disclosed.

The most common attack scenario of abuse of functionality vulnerabilities is denial of service attacks. Once an attacker finds a function that can be abused, they will use it to attempt to slow down or shut down a network server or application (typically not the one that has the abuse of functionality vulnerability). The result is that the target server or application becomes inaccessible to legitimate users for the duration of the attack.

Other attack scenarios involve bypassing access controls. Such scenarios result from a poorly thought out application design—it's hard to give a logical example of this, because the very essence of such vulnerabilities results from a logical flaw in the design. For example, if an application allows regular users to retrieve any file on the server, that functionality can be abused by attackers to retrieve server configuration files. The logical flaw in this example is obvious, but if the application is actually designed to give users full access to the filesystem, this is an abuse of functionality vulnerability, rather than an improperly implemented authorization issue. 

Many abuse of functionality vulnerabilities can be avoided by having a logical application design, but others are very difficult to avoid and have to be considered on a case-by-case basis. 

==Countermeasures==

The precise nature of abuse of functionality vulnerabilities varies greatly between different applications, so little can be provided in terms of practical methods that can be used to prevent such vulnerabilities. One effective measure is to restrict access to dangerous functions only to trusted users. Another is to disable dangerous functions by default. These measures do not prevent abuse of functionality vulnerabilities, but reduce the likelihood of a successful attack.

==Application Check==

To verify that abuse of functionality vulnerabilities are mitigated, make sure that authentication is required for all sensitive operations and dangerous functions are disabled by default.

==Specific Technologies==

* [[719e0f46-1135-4102-9213-0a701f389c61|ASP.NET Abuse of Functionality]]
* [[2895d1d0-318b-4d7e-a428-cd03d2076970|Java Abuse of Functionality]]
* [[58f29253-537a-482f-ab52-561a1ea4407e|PHP Abuse of Functionality]]
]]></Data>
  </Content>
</TeamMentor_Article>