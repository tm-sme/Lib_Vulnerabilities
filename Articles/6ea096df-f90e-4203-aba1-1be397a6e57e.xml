<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>6ea096df-f90e-4203-aba1-1be397a6e57e</Id>
    <Id_History>6ea096df-f90e-4203-aba1-1be397a6e57e,73a53cc9-d5e8-46c7-8fb3-3dda575675a5,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Mail Command Injection</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>Mail Command Injection</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Description==

Mail command injection vulnerabilities occur when an application implements its own email client code and concatenates user data with email commands. There should be no reason to implement email client code in applications that are not email clients. 

Most development platforms provide libraries that provide email functionality, and using these libraries will prevent mail command injection vulnerabilities. If an application implements its own email functionality in a dangerous manner, rather than using trusted third-party APIs, an attacker will be able to manipulate email sent by the application and will be able to send their own email.

All applications that implement their own custom email client code instead of using trusted third-party APIs are affected by mail command injection vulnerabilities.

==Impact==

The impact of mail command injection vulnerabilities is that an attacker will be able to change the email that is being sent by the application to say whatever the attacker wants it to say and/or to send it to additional recipients. The most likely result is that the attacker will be able to use the vulnerable application to send spam. The attacker might also send messages to the application's users that appear to come from the application, and abuse the users' trust to trick them into doing something dangerous, like visiting a malicious site or disclosing their passwords.

==Countermeasures==

To prevent mail command injection vulnerabilities, validate all input and use trusted third-party APIs for email functionality.

* [[b531d29c-86f7-4812-90ce-5f3f0f780aba|Validate Input from All Sources]]
* [[5d1eb706-fd26-4db0-b38f-07ab4084f01e|Use Parameterized Mail APIs]]

==Application Check==

To verify that mail command injection vulnerabilities are prevented, make sure that all data is validated and trusted third-party APIs are used for email functionality.

* [[7f8deb21-cd52-41be-80b4-8897612021dc|Input from All Sources Is Validated]]
* [[83901e15-ee42-48e6-857f-60eece0ad355|Parameterized Mail APIs Are Used]]

==Additional Resources==

* For more information about mail command injection, see http://projects.webappsec.org/w/page/13246948/Mail%20Command%20Injection
]]></Data>
  </Content>
</TeamMentor_Article>