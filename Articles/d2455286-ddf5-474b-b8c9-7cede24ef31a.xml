<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>d2455286-ddf5-474b-b8c9-7cede24ef31a</Id>
    <Id_History>d2455286-ddf5-474b-b8c9-7cede24ef31a,a178e946-8e4f-4fba-b7fe-49af7347b4d7,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>System Information Leak</Title>
    <Category>Error Handling</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 4.0</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>System Information Leak</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[=Description=
A system information leak occurs when either the application or the application server discloses information about the web application platform that might be useful to the attacker. Some examples of information that might benefit the attacker are: the file system path of the application, the name and version of the operating system, the name and version of the web server software, and the name and version of the web application platform and its configuration options. 

The danger of system information leaks is that they make other attacks easier to carry out. In general, the application should volunteer as little information as possible about the platform on which it is running. 

This vulnerability type affects all applications.

=Impact=
System information leaks can be used by attackers to exploit other vulnerabilities, if other vulnerabilities are present. By itself, a system information leak doesn't give an attacker any additional abilities. System information leaks have to be combined with other vulnerabilities to result in a compromise. For example, the operating system used by the application server might be outdated and vulnerable, but the attacker won't know that until the application tells him that the server is outdated. At that point, the attacker can use an exploit targeting the server operating system to compromise the application. 

=Countermeasures=
To prevent system information leaks, be sure to handle all errors, use simple error messages, and disable platform banners. 

* [[461370b3-66e7-4ac3-900f-7e2f757c54a8|Use a Global Exception Handler for Unhandled Exceptions]]
* [[00000000-0000-0000-0000-00000020f866|Use Simple Error Messages]]
* [[a880d974-3543-4190-ae63-ea7e8ac11d0a|Do Not Disclose Valuable Information in Error Messages]]

=Application Check=
To check for adequate protection against system information leaks, verify that all errors are handled, simple error messages are used, and platform banners are disabled.

* [[f0c2bed2-b530-46bc-9e64-8041e0def190|Global Error Handlers Are Used to Catch Unhandled Exceptions]]
* [[00000000-0000-0000-0000-0000002f7a79|Simple Error Messages Are Used]]
* [[76fb9a2a-2091-4d47-a65d-588eda490c90|Valuable Information Is Not Disclosed in Error Messages]]

=Computer Based Training Links=

Use the following Computer Based Training courses for more background information about this type of vulnerabilities.

==Creating Secure ASP.NET Code==

This in-depth course examines the development of secure Web applications in ASP.Net. It provides developers and testers with an overview of common Web application vulnerabilities and a set of nine best practices and techniques to follow in order to avoid them. Throughout the course, students are provided with interactive games and simulations designed to reinforce the secure design and coding concepts that were introduced.

[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127607|COD 311 Creating Secure ASP.NET Code]]

==Creating Secure C# Code==

This course will provide a deep understanding of application security risks and secure coding standards for C# applications. The main lesson guides students through the concepts underlying the coding principles and illustrates real-world best practices and techniques, and the labs allow students to test what they have learned

[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127608|COD 314 Creating Secure C# Code]]

//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//]]></Data>
  </Content>
</TeamMentor_Article>