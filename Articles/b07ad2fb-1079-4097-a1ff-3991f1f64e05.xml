<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>b07ad2fb-1079-4097-a1ff-3991f1f64e05</Id>
    <Id_History>b07ad2fb-1079-4097-a1ff-3991f1f64e05,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Password Management</Title>
    <Category>Authentication</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 4.0</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>Password Management</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[=Description=
An insufficiently protected credential weakness occurs when the application doesn't store or transmit the authentication credentials securely. 
*If the passwords are not hashed and salted, an attacker may be able to recover stored passwords after compromising the application. 
*If the passwords or hashes are not encrypted during transmission, an attacker may be able to intercept passwords or hashes via a man-in-the-middle attack. 
*If passwords are hard-coded, then the attacker will be able to recover them by reverse engineering application code. The attacker has to get the copy of the code for that to be possible, but that is usually a minor obstacle and does not provide sufficient protection. 
*If the password is blank or null, the purpose of authentication is largely defeated, as the attacker can log in without supplying a password at all. 

All applications that use authentication are potentially affected by insufficiently protected credential weakness vulnerabilities. 

=Impact=
An insufficiently protected credential vulnerability makes it easier for an attacker to gain access to the authentication credentials. Usually, some other vulnerability has to be present for the attacker to recover the credentials. Once the attacker has the credentials, he can impersonate the user whose credentials have been compromised. 

Malicious hackers usually target privileged accounts to take over the application. After taking over the application, an attacker may leverage other vulnerabilities to take over the application platform and use it to pivot for other attacks. Compromising the application also gives the attacker access to user data, thus enabling him to impersonate the user. 

=Countermeasures=
To prevent this vulnerability type, use PBKDF2 to secure passwords, and send authentication credentials over encrypted tunnels. 

* [[00000000-0000-0000-0000-0000006adfa3|Store Passwords Securely]]
* [[508f4130-96fd-40b8-9358-552795b810e3|Encrypt Sensitive Data During Transmission]]

=Application Check=
To check for adequate protection against this vulnerability type, verify that PBKDF2 is used to secure passwords, and that authentication credentials are never sent in plain-text. 

* [[00000000-0000-0000-0000-00000077a50c|Passwords Are Stored Securely]]
* [[00000000-0000-0000-0000-0000008f91de|SSL Is Used to Communicate Authentication Credentials]]

=Computer Based Training Links=

Use the following Computer Based Training courses for more background information about this type of vulnerabilities.

==Creating Secure ASP.NET Code==

This in-depth course examines the development of secure Web applications in ASP.Net. It provides developers and testers with an overview of common Web application vulnerabilities and a set of nine best practices and techniques to follow in order to avoid them. Throughout the course, students are provided with interactive games and simulations designed to reinforce the secure design and coding concepts that were introduced.

[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127607|COD 311 Creating Secure ASP.NET Code]]

==Creating Secure C# Code==

This course will provide a deep understanding of application security risks and secure coding standards for C# applications. The main lesson guides students through the concepts underlying the coding principles and illustrates real-world best practices and techniques, and the labs allow students to test what they have learned

[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127608|COD 314 Creating Secure C# Code]]

//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//
]]></Data>
  </Content>
</TeamMentor_Article>